import os
import logging
import requests
import json
import asyncio
import sys
import random
import time
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from bs4 import BeautifulSoup
from starlette.applications import Starlette
from starlette.routing import Route
from starlette.requests import Request
from starlette.responses import Response, PlainTextResponse
import uvicorn

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
TOKEN = os.environ.get("BOT_TOKEN")
if not TOKEN:
    logger.error("‚ùå –û–®–ò–ë–ö–ê: BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Render
PORT = int(os.environ.get("PORT", 8000))
WEBHOOK_URL = os.environ.get("RENDER_EXTERNAL_URL", "") + "/webhook"
PRICES_FILE = "prices.json"

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
try:
    application = Application.builder().token(TOKEN).build()
    logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
    sys.exit(1)

class PriceMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω –Ω–∞ –æ–±–æ–≥—Ä–µ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–±–æ—Ä—ã —Å DNS-Shop"""
    
    def __init__(self):
        self.session = requests.Session()
        self.setup_headers()
        self.base_url = "https://www.dns-shop.ru"
        self.category_url = "https://www.dns-shop.ru/catalog/17a89fab16404e77/obogrevateli/"
    
    def setup_headers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8',
            'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
            'Accept-Encoding': 'gzip, deflate, br',
            'Connection': 'keep-alive',
        })
    
    def parse_products_dns(self):
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ–±–æ–≥—Ä–µ–≤–∞—Ç–µ–ª–µ–π —Å DNS-Shop"""
        try:
            logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω —Å DNS-Shop...")
            
            response = self.session.get(self.category_url, timeout=15)
            
            if response.status_code != 200:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
                return []
            
            soup = BeautifulSoup(response.text, 'html.parser')
            products = []
            
            # –ò—â–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ DNS-Shop
            product_cards = soup.select('.catalog-product, .product-card, [data-id]')
            
            logger.info(f"üì¶ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤: {len(product_cards)}")
            
            for card in product_cards[:15]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                try:
                    # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                    name_elem = card.select_one('.catalog-product__name, .product-title, .title')
                    if not name_elem:
                        continue
                    
                    product_name = name_elem.get_text(strip=True)
                    
                    # –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞
                    price_elem = card.select_one('.product-buy__price, .price, .cost')
                    if not price_elem:
                        continue
                    
                    price_text = price_elem.get_text(strip=True)
                    price = self.clean_price(price_text)
                    
                    if price <= 0:
                        continue
                    
                    # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä
                    link_elem = card.find('a')
                    product_link = link_elem.get('href') if link_elem else ''
                    if product_link and not product_link.startswith('http'):
                        product_link = self.base_url + product_link
                    
                    # ID —Ç–æ–≤–∞—Ä–∞
                    product_id = card.get('data-id') or self.generate_product_id(product_name)
                    
                    products.append({
                        'id': product_id,
                        'name': product_name[:100],
                        'price': price,
                        'link': product_link,
                        'source': 'DNS-Shop',
                        'last_updated': datetime.now().isoformat()
                    })
                        
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")
                    continue
            
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
            return products
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ DNS-Shop: {e}")
            return []
    
    def parse_products_citilink(self):
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ–±–æ–≥—Ä–µ–≤–∞—Ç–µ–ª–µ–π —Å Citilink (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞)"""
        try:
            logger.info("üîÑ –ü—Ä–æ–±—É–µ–º Citilink...")
            
            url = "https://www.citilink.ru/catalog/obogrevateli/"
            response = self.session.get(url, timeout=15)
            
            if response.status_code != 200:
                return []
            
            soup = BeautifulSoup(response.text, 'html.parser')
            products = []
            
            product_cards = soup.select('.ProductCard, .product_data, [data-product-id]')
            
            for card in product_cards[:10]:
                try:
                    name_elem = card.select_one('.ProductCard__name, .title')
                    price_elem = card.select_one('.ProductCard__price, .price')
                    
                    if name_elem and price_elem:
                        product_name = name_elem.get_text(strip=True)
                        price = self.clean_price(price_elem.get_text(strip=True))
                        
                        if price > 0:
                            products.append({
                                'id': self.generate_product_id(product_name),
                                'name': product_name[:100],
                                'price': price,
                                'link': '',
                                'source': 'Citilink',
                                'last_updated': datetime.now().isoformat()
                            })
                except Exception:
                    continue
            
            return products
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ Citilink: {e}")
            return []
    
    def clean_price(self, price_text):
        """–û—á–∏—Å—Ç–∫–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –≤ —á–∏—Å–ª–æ"""
        try:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
            cleaned = ''.join(c for c in price_text if c.isdigit())
            return float(cleaned) if cleaned else 0
        except:
            return 0
    
    def generate_product_id(self, product_name):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID —Ç–æ–≤–∞—Ä–∞"""
        import hashlib
        return hashlib.md5(product_name.encode()).hexdigest()[:10]
    
    def load_previous_prices(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ü–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(PRICES_FILE):
                with open(PRICES_FILE, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return {}
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ü–µ–Ω: {e}")
            return {}
    
    def save_current_prices(self, products):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω –≤ —Ñ–∞–π–ª"""
        try:
            prices_data = {}
            for product in products:
                prices_data[product['id']] = {
                    'name': product['name'],
                    'price': product['price'],
                    'link': product['link'],
                    'source': product.get('source', 'Unknown'),
                    'last_updated': product['last_updated']
                }
            
            with open(PRICES_FILE, 'w', encoding='utf-8') as f:
                json.dump(prices_data, f, ensure_ascii=False, indent=2)
            
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ü–µ–Ω –¥–ª—è {len(prices_data)} —Ç–æ–≤–∞—Ä–æ–≤")
            return prices_data
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ü–µ–Ω: {e}")
            return {}
    
    def check_price_changes(self, current_products):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω –Ω–∞ 10% –∏ –±–æ–ª–µ–µ"""
        previous_prices = self.load_previous_prices()
        changes = []
        
        for product in current_products:
            product_id = product['id']
            current_price = product['price']
            
            if product_id in previous_prices:
                previous_price = previous_prices[product_id]['price']
                
                if previous_price > 0:
                    change_percent = ((current_price - previous_price) / previous_price) * 100
                    
                    if abs(change_percent) >= 10:
                        changes.append({
                            'name': product['name'],
                            'previous_price': previous_price,
                            'current_price': current_price,
                            'change_percent': change_percent,
                            'link': product['link'],
                            'source': product.get('source', 'Unknown')
                        })
        
        return changes

# –°–æ–∑–¥–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä —Ü–µ–Ω
price_monitor = PriceMonitor()

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –¢–ï–õ–ï–ì–†–ê–ú =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = (
        "üîç *–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω –Ω–∞ –æ–±–æ–≥—Ä–µ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–±–æ—Ä—ã*\n\n"
        "–Ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é —Ü–µ–Ω—ã –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞—Ö:\n"
        "‚Ä¢ DNS-Shop\n"
        "‚Ä¢ Citilink\n\n"
        "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/check - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã\n"
        "/monitor - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω\n"
        "/get_prices - –≤—ã–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏\n"
        "/help - —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "‚ö° *–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:* etm.ru –±–ª–æ–∫–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã, –∏—Å–ø–æ–ª—å–∑—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏."
    )
    
    await update.message.reply_text(welcome_text, parse_mode='Markdown')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "‚ÑπÔ∏è *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω*\n\n"
        "*–ö–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/check - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã\n"
        "/monitor - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω\n"
        "/get_prices - –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏\n"
        "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "*–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö:*\n"
        "‚Ä¢ DNS-Shop - –æ–±–æ–≥—Ä–µ–≤–∞—Ç–µ–ª–∏\n"
        "‚Ä¢ Citilink - –æ–±–æ–≥—Ä–µ–≤–∞—Ç–µ–ª–∏\n\n"
        "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @Alex_De_White"
    )
    
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def check_prices(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω"""
    await update.message.reply_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Ü–µ–Ω—ã —Å DNS-Shop –∏ Citilink...")
    
    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        products = []
        
        dns_products = price_monitor.parse_products_dns()
        if dns_products:
            products.extend(dns_products)
            logger.info(f"‚úÖ DNS-Shop: {len(dns_products)} —Ç–æ–≤–∞—Ä–æ–≤")
        
        citilink_products = price_monitor.parse_products_citilink()
        if citilink_products:
            products.extend(citilink_products)
            logger.info(f"‚úÖ Citilink: {len(citilink_products)} —Ç–æ–≤–∞—Ä–æ–≤")
        
        if not products:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ü–µ–Ω—ã –Ω–∏ —Å –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞.\n\n"
                "üîß *–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:*\n"
                "‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∞–π—Ç–∞–º–∏\n"
                "‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å Render\n"
                "‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∞–π—Ç–æ–≤\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏."
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—ã
        price_monitor.save_current_prices(products)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = "üìä *–¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –Ω–∞ –æ–±–æ–≥—Ä–µ–≤–∞—Ç–µ–ª–∏:*\n\n"
        
        for i, product in enumerate(products[:8], 1):
            source_icon = "üõí" if product.get('source') == 'DNS-Shop' else "üîµ"
            message += f"{i}. {source_icon} *{product['name']}*\n"
            message += f"   üí∞ *{product['price']:.0f} —Ä—É–±.*\n"
            if product.get('source'):
                message += f"   üìç {product['source']}\n"
            if product['link']:
                message += f"   üîó [–°—Å—ã–ª–∫–∞]({product['link']})\n"
            message += "\n"
        
        message += f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}"
        
        await update.message.reply_text(message, parse_mode='Markdown', disable_web_page_preview=True)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–Ω: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ü–µ–Ω.")

async def monitor_prices(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω"""
    await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
        products = []
        products.extend(price_monitor.parse_products_dns())
        products.extend(price_monitor.parse_products_citilink())
        
        if not products:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã.")
            return
        
        price_monitor.save_current_prices(products)
        changes = price_monitor.check_price_changes(products)
        
        if not changes:
            await update.message.reply_text("‚úÖ –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        message = "üö® *–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω!*\n\n"
        
        for change in changes[:8]:
            direction = "üìà" if change['change_percent'] > 0 else "üìâ"
            source_icon = "üõí" if change.get('source') == 'DNS-Shop' else "üîµ"
            message += f"{direction} {source_icon} *{change['name']}*\n"
            message += f"   –ë—ã–ª–æ: {change['previous_price']:.0f} —Ä—É–±.\n"
            message += f"   –°—Ç–∞–ª–æ: {change['current_price']:.0f} —Ä—É–±.\n"
            message += f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change['change_percent']:+.1f}%\n"
            if change.get('source'):
                message += f"   üìç {change['source']}\n"
            message += "\n"
        
        if len(changes) > 8:
            message += f"... –∏ –µ—â–µ {len(changes) - 8} –∏–∑–º–µ–Ω–µ–Ω–∏–π"
        
        await update.message.reply_text(message, parse_mode='Markdown', disable_web_page_preview=True)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ —Ü–µ–Ω: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")

async def get_prices_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ —Ü–µ–Ω"""
    try:
        if not os.path.exists(PRICES_FILE):
            await update.message.reply_text("‚ùå –§–∞–π–ª —Å —Ü–µ–Ω–∞–º–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /check")
            return
        
        with open(PRICES_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        temp_filename = f"prices_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(temp_filename, 'w', encoding='utf-8') as temp_file:
            json.dump(data, temp_file, ensure_ascii=False, indent=2, sort_keys=True)
        
        with open(temp_filename, 'rb') as file_to_send:
            await update.message.reply_document(
                document=file_to_send,
                filename=temp_filename,
                caption="üìÑ –§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ü–µ–Ω–∞—Ö –Ω–∞ –æ–±–æ–≥—Ä–µ–≤–∞—Ç–µ–ª–∏"
            )
        
        os.remove(temp_filename)
        
        stats_message = (
            f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö:*\n"
            f"‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ: {len(data)}\n"
            f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
            f"‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(PRICES_FILE)} –±–∞–π—Ç"
        )
        await update.message.reply_text(stats_message, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞.")

# ===== –í–ï–ë–•–£–ö –≠–ù–î–ü–û–ò–ù–¢–´ =====
async def webhook(request: Request) -> Response:
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç Telegram"""
    try:
        data = await request.json()
        update = Update.de_json(data, application.bot)
        await application.update_queue.put(update)
        return Response()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≤–µ–±—Ö—É–∫–µ: {e}")
        return Response(status_code=500)

async def health_check(request: Request) -> PlainTextResponse:
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    return PlainTextResponse("OK")

async def set_webhook():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    if WEBHOOK_URL:
        try:
            await application.bot.set_webhook(url=f"{WEBHOOK_URL}")
            logger.info(f"‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
    else:
        logger.warning("‚ö†Ô∏è RENDER_EXTERNAL_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –≤–µ–±—Ö—É–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

# ===== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í =====
def setup_handlers():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("check", check_prices))
    application.add_handler(CommandHandler("monitor", monitor_prices))
    application.add_handler(CommandHandler("get_prices", get_prices_file))
    logger.info("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

# ===== –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø =====
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    try:
        logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω...")
        
        setup_handlers()
        
        await application.initialize()
        await application.start()
        logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∏ –∑–∞–ø—É—â–µ–Ω–æ")
        
        await set_webhook()
        
        # –°–æ–∑–¥–∞–µ–º Starlette –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        starlette_app = Starlette(routes=[
            Route("/webhook", webhook, methods=["POST"]),
            Route("/healthcheck", health_check, methods=["GET"]),
            Route("/", health_check, methods=["GET"]),
        ])
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        config = uvicorn.Config(
            app=starlette_app,
            host="0.0.0.0",
            port=PORT,
            log_level="info"
        )
        server = uvicorn.Server(config)
        
        logger.info(f"ü§ñ –ë–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
        logger.info(f"üåê –í–µ–±—Ö—É–∫ URL: {WEBHOOK_URL}")
        
        await server.serve()
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        await application.stop()
        raise

if __name__ == "__main__":
    asyncio.run(main())
