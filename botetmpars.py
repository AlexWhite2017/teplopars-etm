import os
import logging
import requests
import json
import asyncio
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from bs4 import BeautifulSoup
from starlette.applications import Starlette
from starlette.routing import Route
from starlette.requests import Request
from starlette.responses import Response, PlainTextResponse
import uvicorn

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Render
TOKEN = os.environ["BOT_TOKEN"]
PORT = int(os.environ.get("PORT", 8000))
WEBHOOK_URL = os.environ.get("RENDER_EXTERNAL_URL", "") + "/webhook"

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–Ω
PRICES_FILE = "prices.json"

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
application = Application.builder().token(TOKEN).build()

class PriceMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω –Ω–∞ –æ–±–æ–≥—Ä–µ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–±–æ—Ä—ã —Å etm.ru"""
    
    def __init__(self):
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',
            'Accept-Encoding': 'gzip, deflate, br',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
        }
        self.base_url = "https://www.etm.ru"
        self.category_url = "https://www.etm.ru/catalog/6040_obogrevatelnye_pribory"
    
    def parse_products(self):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±–æ–≥—Ä–µ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–±–æ—Ä–æ–≤"""
        try:
            logger.info("–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω —Å etm.ru...")
            
            response = requests.get(self.category_url, headers=self.headers, timeout=30)
            response.raise_for_status()
            
            soup = BeautifulSoup(response.text, 'html.parser')
            products = []
            
            # –ò—â–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ - —ç—Ç–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
            product_cards = soup.select('.catalog-item, .product-card, .item')
            
            if not product_cards:
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                product_cards = soup.select('[data-product-id], .js-product')
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤: {len(product_cards)}")
            
            for card in product_cards:
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                    name_elem = card.select_one('.item-name, .product-name, .name, h3, h4')
                    if not name_elem:
                        continue
                    
                    product_name = name_elem.get_text(strip=True)
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É
                    price_elem = card.select_one('.price, .item-price, .product-price, [data-price]')
                    if not price_elem:
                        continue
                    
                    price_text = price_elem.get_text(strip=True)
                    # –û—á–∏—â–∞–µ–º —Ü–µ–Ω—É –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                    price = self.clean_price(price_text)
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä
                    link_elem = card.find('a')
                    product_link = link_elem.get('href') if link_elem else ''
                    if product_link and not product_link.startswith('http'):
                        product_link = self.base_url + product_link
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª/ID —Ç–æ–≤–∞—Ä–∞
                    product_id = card.get('data-product-id') or card.get('id') or self.generate_product_id(product_name)
                    
                    if product_name and price > 0:
                        products.append({
                            'id': product_id,
                            'name': product_name,
                            'price': price,
                            'link': product_link,
                            'last_updated': datetime.now().isoformat()
                        })
                        
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
                    continue
            
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
            return products
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
            return []
    
    def clean_price(self, price_text):
        """–û—á–∏—Å—Ç–∫–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –≤ —á–∏—Å–ª–æ"""
        try:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ –∑–∞–ø—è—Ç–æ–π/—Ç–æ—á–∫–∏
            cleaned = ''.join(c for c in price_text if c.isdigit() or c in ',.')
            # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –¥–ª—è float –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
            cleaned = cleaned.replace(',', '.').replace(' ', '')
            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —Ü–µ–Ω—É –µ—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ
            if '—Ä' in cleaned.lower():
                cleaned = cleaned.split('—Ä')[0]
            return float(cleaned)
        except:
            return 0
    
    def generate_product_id(self, product_name):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è"""
        return str(hash(product_name))[:10]
    
    def load_previous_prices(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ü–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(PRICES_FILE):
                with open(PRICES_FILE, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return {}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ü–µ–Ω: {e}")
            return {}
    
    def save_current_prices(self, products):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω –≤ —Ñ–∞–π–ª"""
        try:
            prices_data = {}
            for product in products:
                prices_data[product['id']] = {
                    'name': product['name'],
                    'price': product['price'],
                    'link': product['link'],
                    'last_updated': product['last_updated']
                }
            
            with open(PRICES_FILE, 'w', encoding='utf-8') as f:
                json.dump(prices_data, f, ensure_ascii=False, indent=2)
            
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ü–µ–Ω –¥–ª—è {len(prices_data)} —Ç–æ–≤–∞—Ä–æ–≤")
            return prices_data
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ü–µ–Ω: {e}")
            return {}
    
    def check_price_changes(self, current_products):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω –Ω–∞ 10% –∏ –±–æ–ª–µ–µ"""
        previous_prices = self.load_previous_prices()
        changes = []
        
        for product in current_products:
            product_id = product['id']
            current_price = product['price']
            
            if product_id in previous_prices:
                previous_price = previous_prices[product_id]['price']
                
                if previous_price > 0:
                    change_percent = ((current_price - previous_price) / previous_price) * 100
                    
                    # –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–æ–ª—å—à–µ 10% –≤ –ª—é–±—É—é —Å—Ç–æ—Ä–æ–Ω—É
                    if abs(change_percent) >= 10:
                        changes.append({
                            'name': product['name'],
                            'previous_price': previous_price,
                            'current_price': current_price,
                            'change_percent': change_percent,
                            'link': product['link']
                        })
        
        return changes

# –°–æ–∑–¥–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä —Ü–µ–Ω
price_monitor = PriceMonitor()

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –¢–ï–õ–ï–ì–†–ê–ú =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = (
        "üîç *–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω –Ω–∞ –æ–±–æ–≥—Ä–µ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–±–æ—Ä—ã*\n\n"
        "–Ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é —Ü–µ–Ω—ã –Ω–∞ —Å–∞–π—Ç–µ etm.ru –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
        "¬´–û–±–æ–≥—Ä–µ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–±–æ—Ä—ã¬ª\n\n"
        "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/check - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã\n"
        "/monitor - –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π\n"
        "/get_prices - –≤—ã–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ —Ü–µ–Ω\n"
        "/help - —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "–Ø –±—É–¥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Ü–µ–Ω –Ω–∞ 10% –∏ –±–æ–ª–µ–µ!"
    )
    
    await update.message.reply_text(welcome_text, parse_mode='Markdown')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "‚ÑπÔ∏è *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω*\n\n"
        "*–ö–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/check - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã\n"
        "/monitor - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω\n"
        "/get_prices - –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ —Ü–µ–Ω\n"
        "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "*–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:*\n"
        "‚Ä¢ –ü–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω —Å etm.ru\n"
        "‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —Ü–µ–Ω–∞–º–∏\n"
        "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö ¬±10%\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö\n\n"
        "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @Alex_De_White"
    )
    
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def check_prices(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω"""
    await update.message.reply_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã...")
    
    try:
        products = price_monitor.parse_products()
        
        if not products:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ü–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
        price_monitor.save_current_prices(products)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–ø-5 —Ç–æ–≤–∞—Ä–æ–≤
        message = "üìä *–¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –Ω–∞ –æ–±–æ–≥—Ä–µ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–±–æ—Ä—ã:*\n\n"
        
        for i, product in enumerate(products[:5], 1):
            message += f"{i}. *{product['name']}*\n"
            message += f"   üí∞ *{product['price']} —Ä—É–±.*\n"
            if product['link']:
                message += f"   üîó [–°—Å—ã–ª–∫–∞]({product['link']})\n"
            message += "\n"
        
        message += f"–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {len(products)}"
        
        await update.message.reply_text(message, parse_mode='Markdown', disable_web_page_preview=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–Ω: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ü–µ–Ω.")

async def monitor_prices(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω"""
    await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
        current_products = price_monitor.parse_products()
        
        if not current_products:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
        price_monitor.save_current_prices(current_products)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        changes = price_monitor.check_price_changes(current_products)
        
        if not changes:
            await update.message.reply_text("‚úÖ –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        message = "üö® *–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω!*\n\n"
        
        for change in changes[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
            direction = "üìà" if change['change_percent'] > 0 else "üìâ"
            message += f"{direction} *{change['name']}*\n"
            message += f"   –ë—ã–ª–æ: {change['previous_price']} —Ä—É–±.\n"
            message += f"   –°—Ç–∞–ª–æ: {change['current_price']} —Ä—É–±.\n"
            message += f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change['change_percent']:+.1f}%\n"
            if change['link']:
                message += f"   üîó [–¢–æ–≤–∞—Ä]({change['link']})\n"
            message += "\n"
        
        if len(changes) > 10:
            message += f"... –∏ –µ—â–µ {len(changes) - 10} –∏–∑–º–µ–Ω–µ–Ω–∏–π"
        
        await update.message.reply_text(message, parse_mode='Markdown', disable_web_page_preview=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ —Ü–µ–Ω: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")

async def get_prices_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ —Ü–µ–Ω"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(PRICES_FILE):
            await update.message.reply_text("‚ùå –§–∞–π–ª —Å —Ü–µ–Ω–∞–º–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /check")
            return
        
        # –ß–∏—Ç–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª
        with open(PRICES_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        temp_filename = f"prices_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(temp_filename, 'w', encoding='utf-8') as temp_file:
            json.dump(data, temp_file, ensure_ascii=False, indent=2, sort_keys=True)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        with open(temp_filename, 'rb') as file_to_send:
            await update.message.reply_document(
                document=file_to_send,
                filename=temp_filename,
                caption="üìÑ –§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ü–µ–Ω–∞—Ö –Ω–∞ –æ–±–æ–≥—Ä–µ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–±–æ—Ä—ã"
            )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(temp_filename)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö
        stats_message = (
            f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö:*\n"
            f"‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ: {len(data)}\n"
            f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
            f"‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(PRICES_FILE)} –±–∞–π—Ç"
        )
        await update.message.reply_text(stats_message, parse_mode='Markdown')
        
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ JSON: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ñ–∞–π–ª–∞ —Ü–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞.")

# ===== –í–ï–ë–•–£–ö –≠–ù–î–ü–û–ò–ù–¢–´ –î–õ–Ø RENDER =====
async def webhook(request: Request) -> Response:
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç Telegram"""
    try:
        data = await request.json()
        update = Update.de_json(data, application.bot)
        await application.update_queue.put(update)
        return Response()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –≤–µ–±—Ö—É–∫–µ: {e}")
        return Response(status_code=500)

async def health_check(request: Request) -> PlainTextResponse:
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    return PlainTextResponse("OK")

async def set_webhook():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    if WEBHOOK_URL:
        await application.bot.set_webhook(url=f"{WEBHOOK_URL}")
        logger.info(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    else:
        logger.warning("RENDER_EXTERNAL_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –≤–µ–±—Ö—É–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

# ===== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í =====
def setup_handlers():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("check", check_prices))
    application.add_handler(CommandHandler("monitor", monitor_prices))
    application.add_handler(CommandHandler("get_prices", get_prices_file))

# ===== –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø =====
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω...")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    setup_handlers()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    await application.initialize()
    await application.start()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    await set_webhook()
    
    # –°–æ–∑–¥–∞–µ–º Starlette –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    starlette_app = Starlette(routes=[
        Route("/webhook", webhook, methods=["POST"]),
        Route("/healthcheck", health_check, methods=["GET"]),
        Route("/", health_check, methods=["GET"]),
    ])
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    config = uvicorn.Config(
        app=starlette_app,
        host="0.0.0.0",
        port=PORT,
        log_level="info"
    )
    server = uvicorn.Server(config)
    
    logger.info(f"ü§ñ –ë–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    await server.serve()

if __name__ == "__main__":
    asyncio.run(main())
